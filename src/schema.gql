# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ConfirmEmail {
  token: String!
}

input CourseDetails {
  availabile: Boolean!
  description: String!
  duration: String!
  title: String!
}

type Courses {
  availabile: Boolean!
  createdAt: DateTime!
  description: String!
  duration: String!
  id: ID!
  instructor: Users!
  modules: [Module!]!
  title: String!
  updatedAt: DateTime!
}

input CreateLesson {
  description: String!
  moduleId: String!
  sequenceNumber: Int!
  title: String!
}

input CreateModuleInput {
  """ID of the course the module belongs to"""
  courseId: String!

  """Title of the module"""
  title: String!
}

input CreateUser {
  email: String!
  isInstructor: Boolean
  name: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Lessons {
  createdAt: DateTime!
  description: String!

  """How long it would take to consume the resource"""
  duration: String!
  id: ID!
  mediaURL: String!
  module: Module!
  sequenceNumber: Int!
  title: String!
  type: String!
  updatedAt: DateTime!
  uploadKey: String!
}

type LoginResponse {
  accessToken: String!
  user: Users!
}

input LoginUserDetails {
  email: String!
  password: String!
}

"""Module groups lessons into different sections"""
type Module {
  createdAt: DateTime!
  id: ID!

  """Lessons in a module"""
  lessons: [Lessons!]!

  """Title of the module"""
  title: String!
  updatedAt: DateTime!
}

type Mutation {
  addCourse(courseDetails: CourseDetails!): Courses!
  confirmEmail(confirmEmail: ConfirmEmail!): String!
  createLesson(content: Upload!, createLesson: CreateLesson!): Lessons!
  createModule(createModuleInput: CreateModuleInput!): Module!
  createUser(createUserDetails: CreateUser!): String!
  loginUser(loginUserDetails: LoginUserDetails!): LoginResponse!
  removeModule(moduleId: String!): Boolean!
  updateCourse(courseDetails: UpdateCourseInput!, courseId: String!): Courses!
  updateModule(moduleId: String!): Module!
}

type Query {
  getACourse(courseId: String!): Courses!
  module(
    """Returns a single module"""
    moduleId: String!
  ): Module!
  myProfile: Users!
  users(id: ID!): Users!
}

input UpdateCourseInput {
  availabile: Boolean
  description: String
  duration: String
  title: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Users {
  address: String
  coursesInstructing: [Courses]
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  updatedAt: DateTime!
}